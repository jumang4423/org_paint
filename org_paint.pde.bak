// Infinite Canvas Painting App
// For thermal printer output (576px width)

PShader paintShader;
ChunkManager chunkManager;

// Canvas settings
final int CANVAS_WIDTH = 576;
final int CHUNK_HEIGHT = 1024;
final int SCREEN_HEIGHT = 324; // 16:9 ratio based on width

// Drawing state
boolean isDrawing = false;
boolean isErasing = false;
float brushSize = 20.0;
float scrollY = 0;
float scrollVelocity = 0;

// Mouse state for shader
PVector prevMouse = new PVector(-1, -1);
PVector globalPrevMouse = new PVector(-1, -1);

void setup() {
  size(576, 324, P2D);
  
  // Initialize chunk manager
  chunkManager = new ChunkManager(CHUNK_HEIGHT);
  
  // Load shader
  paintShader = loadShader("paint_frag.glsl", "paint_vert.glsl");
  
  println("Infinite canvas initialized");
  println("Canvas width: " + CANVAS_WIDTH + "px (thermal printer width)");
  println("Chunk height: " + CHUNK_HEIGHT + "px");
  println("Controls:");
  println("  - Left click: Draw");
  println("  - Right click: Erase");
  println("  - Mouse wheel: Scroll");
  println("  - Arrow keys: Scroll up/down");
  println("  - Q/A: Increase/Decrease brush size");
  println("  - C: Clear canvas");
  println("  - S: Save canvas to file");
  println("  - D: Debug info");
}

void draw() {
  // Apply smooth scrolling
  if (abs(scrollVelocity) > 0.1) {
    scrollY += scrollVelocity;
    scrollY = max(0, scrollY); // Don't scroll above top
    scrollVelocity *= 0.9; // Damping
  }
  
  // Apply painting if mouse is pressed
  if (isDrawing || isErasing) {
    float globalMouseX = mouseX;
    float globalMouseY = mouseY + scrollY;
    
    chunkManager.applyPaint(globalMouseX, globalMouseY,
                           globalPrevMouse.x, globalPrevMouse.y,
                           brushSize, isErasing, paintShader);
    
    globalPrevMouse.set(globalMouseX, globalMouseY);
  }
  
  // Display the visible portion of canvas
  background(200); // Gray background to see canvas bounds
  
  // Render chunks
  chunkManager.render(scrollY);
  
  // Draw UI overlay
  drawUI();
  
  // Update previous mouse position for next frame
  prevMouse.set(mouseX, mouseY + scrollY);
}

void drawUI() {
  // Draw brush preview at cursor
  noFill();
  stroke(isErasing ? color(255, 100, 100) : color(100, 100, 255));
  strokeWeight(2);
  ellipse(mouseX, mouseY, brushSize, brushSize);
  
  // Draw info text
  fill(0);
  noStroke();
  textAlign(LEFT, TOP);
  text("Mode: " + (isErasing ? "ERASE" : "DRAW"), 10, 10);
  text("Brush: " + (int)brushSize + "px", 10, 25);
  text("Scroll Y: " + (int)scrollY, 10, 40);
  text("Max Y: " + (int)chunkManager.getMaxY(), 10, 55);
  text("FPS: " + (int)frameRate, 10, 70);
}

void mousePressed() {
  if (mouseButton == LEFT) {
    isDrawing = true;
    isErasing = false;
  } else if (mouseButton == RIGHT) {
    isDrawing = true;
    isErasing = true;
  }
  globalPrevMouse.set(mouseX, mouseY + scrollY);
}

void mouseReleased() {
  isDrawing = false;
  isErasing = false;
  globalPrevMouse.set(-1, -1);
}

void mouseWheel(MouseEvent event) {
  scrollVelocity += event.getCount() * 20;
}

void keyPressed() {
  switch(key) {
    case 'q':
    case 'Q':
      brushSize = min(brushSize + 5, 100);
      break;
    case 'a':
    case 'A':
      brushSize = max(brushSize - 5, 5);
      break;
    case 'c':
    case 'C':
      clearCanvas();
      break;
    case 's':
    case 'S':
      saveCanvas();
      break;
    case 'd':
    case 'D':
      chunkManager.debugInfo();
      break;
  }
  
  // Arrow key scrolling
  if (key == CODED) {
    switch(keyCode) {
      case UP:
        scrollVelocity -= 30;
        break;
      case DOWN:
        scrollVelocity += 30;
        break;
    }
  }
}

void clearCanvas() {
  chunkManager.clear();
  scrollY = 0;
  scrollVelocity = 0;
  println("Canvas cleared");
}

void saveCanvas() {
  PImage fullCanvas = chunkManager.exportFullCanvas();
  if (fullCanvas != null) {
    String filename = "paint_" + year() + nf(month(), 2) + nf(day(), 2) + 
                      "_" + nf(hour(), 2) + nf(minute(), 2) + nf(second(), 2) + ".png";
    fullCanvas.save(filename);
    println("Canvas saved as: " + filename);
    println("Dimensions: " + fullCanvas.width + "x" + fullCanvas.height);
  } else {
    println("Nothing to save");
  }
}